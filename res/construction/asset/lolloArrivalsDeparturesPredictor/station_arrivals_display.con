local constants = require('lolloArrivalsDeparturesPredictor.constants')
local constructionutil = require("constructionutil")
local transf = require("transf")
local utils = require("lolloArrivalsDeparturesPredictor.paramHelpers")

local styles = { "station_board", "station_board_hanging", "station_board_floating", "station_wide_board", "station_wide_board_hanging", "station_wide_board_floating" }
--[[
    -- this won't work here
local _currentFilePathAbsolute = debugPrint(string.sub(debug.getinfo(1, 'S').source, 1))
local _currentFilePathRelative = _currentFilePathAbsolute:split('/res/construction/')[2]
-- "asset/lolloArrivalsDeparturesPredictor/station_arrivals_display.con"
]]
local function getParamPrefix(name)
    return constants.paramPrefix .. name
end

local function getMdl(style)
    return "lolloArrivalsDeparturesPredictor/" .. style .. ".mdl"
end

local function getParams()
    local params = {}

    params[#params+1] = {
        key = getParamPrefix("style"),
        name = _("Style"),
        uiType = "ICON_BUTTON",
        values = utils.getIcons(styles),
        defaultIndex = 3
    }

    utils.addCargoOverrideParam(params, getParamPrefix)
    utils.addRotateParams(params, getParamPrefix)
    utils.addOffsetParams(params, getParamPrefix)

    return params
end

function data()
    return {
        -- type = "ASSET_TRACK",
        type = "ASSET_DEFAULT",
        description = {
            name = _("DynamicArrivalsSummaryBoardName"),
            description = _("DynamicArrivalsSummaryBoardDesc"),
            icon = "ui/construction/asset/lolloArrivalsDeparturesPredictor/station_arrivals_display@2x.tga"
        },
        availability = {},
        buildMode = "SINGLE",
        categories = { "badgerrhax" },
        order = 13,
        skipCollision = true,
        autoRemovable = false,
        params = getParams(),
        updateFn = function(params)
            -- print('LOLLO params =') debugPrint(params)
            local result = { }
            result.models = {}

            local rotate = utils.getRotateValue(params, getParamPrefix)
            local offset = utils.getOffsetValue(params, getParamPrefix)

            local style = styles[params[getParamPrefix("style")]+1]
            result.models[#result.models + 1] = {
                id = getMdl(style),
                transf = constructionutil.rotateTransf(params, transf.rotZYXTransl(rotate, offset))
            }
            -- result.models[#result.models + 1] = {
            --     id = 'lolloArrivalsDeparturesPredictor/icon/blue.mdl',
            --     transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1}
            -- }

--[[ 			local labelValues = {}
            for i = 1, 29 do
                labelValues[i] = ""
            end

            labelValues[1] = "Destination"
            labelValues[2] = "Plat"
            labelValues[3] = "Time"
            labelValues[28] = params[configKey("time_string")]

            local numArrivals = params[configKey("num_arrivals")] or 0
            if numArrivals > 0 then
                for i = 1, numArrivals do
                    local labelIndexStart = 3 * i + 1
                    labelValues[labelIndexStart] = params[configKey("arrival_" .. i .. "_dest")]
                    labelValues[labelIndexStart+1] = tostring(params[configKey("arrival_" .. i .. "_terminal")])
                    labelValues[labelIndexStart+2] = params[configKey("arrival_" .. i .. "_time")]
                end
            end

            result.labelText = {
                [#result.models-1] = labelValues
            } ]]

            result.terrainAlignmentLists = { { type = "EQUAL", faces = {} }}
            result.groundFaces = {}

    -- specifically to make the game treat this as a construction
    -- makes this thing easier to select in game; capacity must be > 0
    -- it also makes it bulldozable with the bulldozer, instead of the eraser brush,
    -- so we can catch the bulldoze event, which we otherwise cannot.
    -- LOLLO TODO see if we can get rid of this bodge
            result.personCapacity = { type = "RESIDENTIAL", capacity = 1, }

            -- print('LOLLO result =') debugPrint(result)
            return result
        end
    }
end
