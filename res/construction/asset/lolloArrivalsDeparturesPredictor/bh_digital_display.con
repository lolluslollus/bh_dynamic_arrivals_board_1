local constants = require('lolloArrivalsDeparturesPredictor.constants')
local constructionutil = require("constructionutil")
local transf = require('transf')
local utils = require("lolloArrivalsDeparturesPredictor.paramHelpers")

local styles = { "digital_display_name", "digital_display_nopole_name", "digital_display_floating_name" }

-- I use a utility function to join the param label registered with the engine, with the individual param names
local function getParamName(name)
    return constants.paramPrefix .. name
end

local function getMdl(style)
    return "lolloArrivalsDeparturesPredictor/bh_manchester_metrolink_" .. style .. ".mdl"
end

local function getParams()
    local params = {}
    params[#params+1] = {
        key = getParamName("style"),
        name = _("Style"),
        uiType = "ICON_BUTTON",
        values = utils.getIcons(styles)
    }
    params[#params+1] = {
        key = getParamName("snapTrackPlatformAlign"),
        name = _("Snapping Align"),
        values = { _("Free"), _("Platform") },
        defaultIndex = 1
    }

    -- since the terminal placement logic is not perfect, provide a param to override the terminal this sign is linked to
    utils.addCargoOverrideParam(params, getParamName)
    utils.addTerminalOverrideParam(params, getParamName)
    utils.addRotateParams(params, getParamName)
    utils.addOffsetParams(params, getParamName)

    return params
end

function data()
    return {
        type = "ASSET_TRACK",
        description = {
            name = _("DynamicArrivalsSingleTerminalName"),
            description = _("DynamicArrivalsSingleTerminalDesc"),
            icon = "ui/construction/asset/lolloArrivalsDeparturesPredictor/bh_digital_display_construction@2x.tga"
        },
        availability = {},
        buildMode = "SINGLE",
        categories = { "badgerrhax" },
        order = 13,
        skipCollision = true,
        autoRemovable = false,
        params = getParams(),
        updateFn = function(params)
            local result = { }
            result.models = {}

            local align = params[getParamName("snapTrackPlatformAlign")] or 1

            local rotate = utils.getRotateValue(params, getParamName)
            if align ~= 0 then
                rotate.x = rotate.x + math.pi / 2
            end

            local offset = utils.getOffsetValue(params, getParamName)
            if align ~= 0 then
                -- offset.y == 0 is the middle of the track, since this is a track asset.
                -- This is good for the terminal detection.
                -- offset.y = offset.y - 4.95
                offset.y = offset.y - 3.7 -- a bit less so it looks good on thin platforms
                -- offset.z = offset.z + 0.54
                offset.z = offset.z + 0.3 -- a bit less so it fits freestyle stations
            end

            local style = styles[params[getParamName("style")]+1]
            result.models[#result.models + 1] = {
                id = getMdl(style),
                transf = constructionutil.rotateTransf(params, transf.rotZYXTransl(rotate, offset))
            }
            -- result.models[#result.models + 1] = {
            --     id = 'lolloArrivalsDeparturesPredictor/icon/blue.mdl',
            --     transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1}
            -- }

            -- local labelValues = {
            -- 	params[configKey("arrival_1_dest")], -- these are some of the params provided by the arrivals engine when updating this construction
            -- 	params[configKey("arrival_2_dest")],
            -- 	params[configKey("time_string")],
            -- 	params[configKey("arrival_1_time")],
            -- 	params[configKey("arrival_2_time")],
            -- }

            -- local joinTables = function(t, t2)
            --     local results = {}
            --     for _, v in ipairs(t) do
            --         results[#results+1] = v
            --     end
            --     for _, v in ipairs(t2) do
            --         results[#results+1] = v
            --     end
            --     return results
            -- end,

            -- result.labelText = {
            -- 	[#result.models-1] = joinTables(labelValues, labelValues) -- our sign is 2-sided with same values on both
            -- }

            result.terrainAlignmentLists = { { type = "EQUAL", faces = {} }}
            result.groundFaces = {}

        -- specifically to make the game treat this as a construction
        -- makes this thing easier to select in game; capacity must be > 0
        -- it also makes it bulldozable with the bulldozer, instead of the eraser brush,
        -- so we can catch the bulldoze event, which we otherwise cannot.
        -- LOLLO TODO see if we can get rid of this bodge
            result.personCapacity = { type = "RESIDENTIAL", capacity = 1, }

            return result
        end
    }

end